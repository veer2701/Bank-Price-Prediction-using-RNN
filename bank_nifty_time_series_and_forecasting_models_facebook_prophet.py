# -*- coding: utf-8 -*-
"""Bank Nifty Time Series and Forecasting Models Facebook Prophet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DcqvJp3v8kbH5KrKKvhp7gsP94RxpaxN

# Time Series and Forecasting Models: Facebook Prophet
## 1. Introduction
Prophet is an open source library published by Facebook in 2017 which is built upon scikit-learn time series modelling and automatically detects changes in trends by selecting changepoints from the data. It is an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects, and includes automatic detection for all values.

## 2. Install/import libraries
"""

!pip install fbprophet
!pip install yfinance
!pip install mplfinance

# Commented out IPython magic to ensure Python compatibility.
import yfinance as yf

import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.style as style
import matplotlib.patches as mpatches
from matplotlib.dates import date2num, DateFormatter, WeekdayLocator,\
    DayLocator, MONDAY
from mplfinance.original_flavor import candlestick_ohlc
import seaborn as sns

import datetime
from datetime import date, timedelta

import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

# %matplotlib inline

"""## 3. Import data"""

bn_stocks = yf.download("^NSEBANK HDFCBANK.NS KOTAKBANK.NS ICICIBANK.NS SBIN.NS YESBANK.NS", start=datetime.datetime(2010, 1, 1), 
                                     end=datetime.datetime(2022, 2, 15), group_by='tickers')
bn_stocks.head(10)

bn =  bn_stocks['^NSEBANK']
                                     
bn.head()

bn['Adj Close']

"""## 4. Format data for Prophet
The input to Prophet is always a dataframe with two columns: ds and y. The ds (datestamp) column should be of a format expected by Pandas, ideally YYYY-MM-DD for a date or YYYY-MM-DD HH:MM:SS for a timestamp. The y column must be numeric, and represents the measurement we wish to forecast.
"""

# Create a dataframe that complies with Prophet requirements

prophet_bn_adj = bn[['Adj Close']].copy()

# Reset the index back so Dates are no longer indexed
prophet_bn_adj.reset_index(inplace=True)

# Rename the columns for use in FB prophet
prophet_bn_adj.rename(columns={'Date': 'ds', 'Adj Close': 'y'}, inplace=True)

prophet_bn_adj.head()

# Plot Adjusted Close price
pd.plotting.register_matplotlib_converters()
ax = prophet_bn_adj.set_index('ds').plot(figsize=(16,8))
ax.set_title('NSEBANK Adjusted Close Price from 2010-2022', color = 'black', fontsize = 20)
ax.set_ylabel('Stock Price', color = 'black', fontsize = 15)
ax.set_xlabel('Date', color = 'black', fontsize = 15)

plt.show()

"""## 5. Modelling
Prophet follows the sklearn model API. We create an instance of the Prophet class and then call its fit and predict methods.

### 5.1 Fit and train the model
Fit the model by instantiating a new Prophet object. Any settings to the forecasting procedure are passed into the constructor.
"""

from fbprophet import Prophet
# Instantiate model and pass seasonality setting

m = Prophet(daily_seasonality = True)

"""Call the fit method and pass in the dataframe of dates and prices."""

# fit the model

m.fit(prophet_bn_adj)

"""## 5.2 Create future dates to forecast
Predictions are then made on a dataframe with a column ds containing the dates for which a prediction is to be made. You can get a suitable dataframe that extends into the future a specified number of days using the helper method Prophet.make_future_dataframe.
"""

# create a dataframe containing future dates to be forecast 
future = m.make_future_dataframe(periods=730, freq='D')     
future.tail()

"""## 5.3 Predictions
Forecasting future values in the dataframe containing dates for prediction.
"""

# Pass the dataframe to the model with dates to predict future values
forecast = m.predict(future)

"""### Plot Actual vs Predicted prices"""

# Plot Forecast and Actual prices  
m.plot(forecast, uncertainty=True, figsize=(12,6))
plt.title('Banknifty Adjusted Close price\n Facebook Prophet Forecast and Fitting', color = 'black', fontsize = 20)
plt.xlabel("Date", color = 'black', fontsize = 15)
plt.ylabel("Stock Price", color = 'black', fontsize = 15)
plt.show()

"""In the above plot:

- Blue line = Forecasted values
- Black dots = Observed (actual) values
- Blue-shaded region = Confidence interval
### Trend Changepoints
Time series frequently have abrupt changes in their trajectories. By default, Prophet will automatically detect these changepoints and will allow the trend to adapt appropriately.
"""

from fbprophet.plot import add_changepoints_to_plot

fig = m.plot(forecast, figsize=(12,6))
# the change points are added to our plot 
a = add_changepoints_to_plot(fig.gca(), m, forecast)
plt.title("Changepoints for Banknifty Adjusted Close Price using Prophet", color = 'black', fontsize = 20)
plt.xlabel("Date", color = 'black', fontsize = 15)
plt.ylabel("Stock Price", color = 'black', fontsize = 15)
plt.show()

"""By default, Prophet adds 25 changepoints into the initial 80% of the data set. Taking a look at the possible changepoints (dotted red lines) in the above chart, we can see they fit quite well with some of the highs and lows.

### Plot magnitudes of changepoints
Prophet will also let us take a look at the magnitudes of these possible changepoints.
"""

deltas = m.params['delta'].mean(0) 
fig = plt.figure(facecolor='w', figsize=(12,6))
ax = fig.add_subplot(111)
ax.bar(range(len(deltas)), deltas)
ax.grid(True, which='major', c='gray', ls='-', lw=1, alpha=0.2)
plt.title('Magnitude of the rate change at each changepoint', color = 'black', fontsize = 20)
ax.set_ylabel('Rate change', color = 'black', fontsize = 15)
ax.set_xlabel('Potential changepoint', color = 'black', fontsize = 15)
fig.tight_layout()

"""We can see that the red dotted lines in the plot of changepoints correspond with plot above of the magnitude of the rate change at each changepoint. Even though we have a lot of places where the rate can possibly change, because of the sparse prior, most of these changepoints go unused.

### Extract changepoints
If we want to use something like this in a model, we need a way of extracting changepoint data.
"""

# View changepoints

m.changepoints

"""### Plot components of the forecasts"""

# Plot the trend, weekly, yearly and daily components

m.plot_components(forecast)
plt.show()

"""Our data has some seasonal information present. Based on the estimated trends, we can see from the yearly subplot that, usually, the stock price is highest in mid-August and, according to the weekly subplot, mostly on Fridays. Inevitably, the daily subplot shows that the stock price fluctuates throughout the day.

Finally, the trend subplot shows an upward trend including an increase in the stock price between mid 2020 and beginning of 2022). The dataset only contained data up to the end of 2019 so this prediction does not reflect any impact of Covid-19.
"""

